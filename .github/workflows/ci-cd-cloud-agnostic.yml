name: CI/CD Pipeline - leadflowx-scheduler

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CONTAINER_NAME: leadflowx-scheduler
  CONTAINER_REGISTRY: harbor.example.com # Replace with your Harbor registry address
  HELM_CHART_PATH: helm/scheduler # Path to the Helm chart within the repo
  KUBECONFIG_SECRET: KUBECONFIG

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Go Application
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test ./...
    
    - name: Run security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build application
      run: go build -o main .
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Harbor Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ github.sha }},${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:latest
        cache-from: type=registry,ref=${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:buildcache,mode=max
    
    # Set up Helm
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.11.1'
    
    # Configure kubectl
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets[env.KUBECONFIG_SECRET] }}
    
    # Deploy to Kubernetes using Helm
    - name: Deploy to Kubernetes with Helm
      run: |
        cd ${{ env.HELM_CHART_PATH }} || (echo "Creating Helm chart directory" && mkdir -p ${{ env.HELM_CHART_PATH }})
        
        # Update image tag in values.yaml or use --set
        helm upgrade --install \
          --namespace scheduler \
          --create-namespace \
          --set image.repository=${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }} \
          --set image.tag=${{ github.sha }} \
          ${{ env.CONTAINER_NAME }} .

  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets[env.KUBECONFIG_SECRET] }}
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        kubectl wait --namespace scheduler --for=condition=available deployment/${{ env.CONTAINER_NAME }} --timeout=180s
    
    - name: Health check
      run: |
        # Get the service URL
        SERVICE_IP=$(kubectl get svc ${{ env.CONTAINER_NAME }} -n scheduler -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        SERVICE_PORT=$(kubectl get svc ${{ env.CONTAINER_NAME }} -n scheduler -o jsonpath='{.spec.ports[0].port}')
        
        # Check health endpoint
        curl -f http://$SERVICE_IP:$SERVICE_PORT/health || exit 1
