apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "scheduler.fullname" . }}
  labels:
    {{- include "scheduler.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "scheduler.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "scheduler.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "scheduler.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: LOG_LEVEL
              value: {{ .Values.config.logLevel | quote }}
            - name: ENVIRONMENT
              value: {{ .Values.config.environment | quote }}
            - name: ENABLE_METRICS
              value: {{ .Values.config.enableMetrics | quote }}
            # Main application env vars based on main.go
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.externalServices.postgres.username }}:$(POSTGRES_PASSWORD)@{{ .Values.externalServices.postgres.host }}:{{ .Values.externalServices.postgres.port }}/{{ .Values.externalServices.postgres.database }}?sslmode=disable"
            - name: KAFKA_BROKER
              value: {{ .Values.config.kafkaBootstrapServers | quote }}
            # Additional environment variables
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.postgres.existingSecret }}
                  key: {{ .Values.externalServices.postgres.passwordKey }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # TCP probe initially as we need to implement health endpoints
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
